AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  ssu-it-locker

  SSU IT Collage locker reservation system.

Parameters:
  TableName:
    Type: String
    Description: DynamoDB Table name for user, locker information.
    Default: 'LockerTable'
  AwsSamLocal:
    Type: String
    Default: ''
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    Environment:
      Variables:
        TABLE_NAME: !Ref TableName
        AWS_SAM_LOCAL: !Ref AwsSamLocal
Conditions:
  IsSamLocal: !Equals
    - !Ref AwsSamLocal
    - true
Resources:
  LocalCorsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./dist
      Handler: common.localCorsHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        AuthSsuLogin:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/v1/auth/ssu_login
            Method: options
        AuthLogout:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/v1/auth/logout
            Method: options
        ConfigGet:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/v1/config
            Method: options
        ConfigUpdate:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/v1/config/update
            Method: options
        LockerClaim:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/v1/locker/claim
            Method: options
        LockerUnclaim:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/v1/locker/unclaim
            Method: options
        LockerCount:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/v1/locker/count
            Method: options
        LockerQuery:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/v1/locker/query
            Method: options
        UserGet:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/v1/user
            Method: options
        UserUpdate:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/v1/user/update
            Method: options
        UserDelete:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/v1/user/delete
            Method: options
        UserQuery:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/v1/user/query
            Method: options
        UserBatchDelete:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/v1/user/batch/delete
            Method: options
        UserBatchPut:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/v1/user/batch/put
            Method: options
  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: nodejs14.x
    Properties:
      LayerName: "dependencies"
      ContentUri: dependencies/
      CompatibleRuntimes:
        - nodejs14.x
  # Backend Lambda Resources
  AuthSsuLoginFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./dist
      Handler: handler.auth.ssuLoginHandler
      Runtime: nodejs14.x
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Architectures:
        - x86_64
      Events:
        AuthSsuLogin:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/v1/auth/ssu_login
            Method: get
  AuthLogoutFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./dist
      Handler: handler.auth.logoutHandler
      Runtime: nodejs14.x
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Architectures:
        - x86_64
      Events:
        AuthLogout:
          Type: Api
          Properties:
            Path: /api/v1/auth/logout
            Method: get
  ConfigGetFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./dist
      Handler: handler.config.getConfigHandler
      Runtime: nodejs14.x
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Architectures:
        - x86_64
      Events:
        ConfigGet:
          Type: Api
          Properties:
            Path: /api/v1/config
            Method: get
  ConfigUpdateFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./dist
      Handler: handler.config.updateConfigHandler
      Runtime: nodejs14.x
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Architectures:
        - x86_64
      Events:
        ConfigUpdate:
          Type: Api
          Properties:
            Path: /api/v1/config/update
            Method: post
  LockerClaimFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./dist
      Handler: handler.locker.claimLockerHandler
      Runtime: nodejs14.x
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Architectures:
        - x86_64
      Events:
        LockerClaim:
          Type: Api
          Properties:
            Path: /api/v1/locker/claim
            Method: post
  LockerUnclaimFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./dist
      Handler: handler.locker.unclaimLockerHandler
      Runtime: nodejs14.x
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Architectures:
        - x86_64
      Events:
        LockerUnclaim:
          Type: Api
          Properties:
            Path: /api/v1/locker/unclaim
            Method: post
  LockerCountFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./dist
      Handler: handler.locker.getClaimedLockerCountHandler
      Runtime: nodejs14.x
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Architectures:
        - x86_64
      Events:
        LockerCount:
          Type: Api
          Properties:
            Path: /api/v1/locker/count
            Method: get
  LockerQueryFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./dist
      Handler: handler.locker.queryClaimedLockersHandler
      Runtime: nodejs14.x
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Architectures:
        - x86_64
      Events:
        LockerQuery:
          Type: Api
          Properties:
            Path: /api/v1/locker/query
            Method: get
  UserGetFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./dist
      Handler: handler.user.getUserHandler
      Runtime: nodejs14.x
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Architectures:
        - x86_64
      Events:
        UserGet:
          Type: Api
          Properties:
            Path: /api/v1/user
            Method: get
  UserQueryFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./dist
      Handler: handler.user.queryUserHandler
      Runtime: nodejs14.x
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Architectures:
        - x86_64
      Events:
        UserQuery:
          Type: Api
          Properties:
            Path: /api/v1/user/query
            Method: get
  UserUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist
      Handler: handler.user.updateUserHandler
      Runtime: nodejs14.x
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Architectures:
        - x86_64
      Events:
        UserUpdate:
          Type: Api
          Properties:
            Path: /api/v1/user/update
            Method: post
  UserDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist
      Handler: handler.user.deleteUserHandler
      Runtime: nodejs14.x
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Architectures:
        - x86_64
      Events:
        UserDelete:
          Type: Api
          Properties:
            Path: /api/v1/user/delete
            Method: post
  UserBatchDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist
      Handler: handler.user.batchDeleteUserHandler
      Runtime: nodejs14.x
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Architectures:
        - x86_64
      Events:
        UserBatchDelete:
          Type: Api
          Properties:
            Path: /api/v1/user/batch/delete
            Method: post
  UserBatchPutFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist
      Handler: handler.user.batchPutUserHandler
      Runtime: nodejs14.x
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Architectures:
        - x86_64
      Events:
        UserBatchPut:
          Type: Api
          Properties:
            Path: /api/v1/user/batch/put
            Method: post
  DynamoDBLockerTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: 'Retain'
    UpdateReplacePolicy: 'Retain'
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: type
          AttributeType: S
        - AttributeName: id
          AttributeType: S
        - AttributeName: lockerId
          AttributeType: S
      KeySchema:
        - AttributeName: type
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: lockerIdIndex
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: lockerId
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - iA
              - n
              - d
              - cU
      BillingMode: 'PAY_PER_REQUEST'
  FrontS3Bucket:
    DeletionPolicy: 'Delete'
    Metadata:
      Comment: 'Bucket to store some data'
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
    Type: 'AWS::S3::Bucket'
  FrontS3BucketPolicy:
    Metadata:
      Comment: 'Bucket policy to allow cloudfront to access the data'
    Properties:
      Bucket: !Ref FrontS3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: 'Allow'
            Principal: '*'
            Resource:
              - !Sub 'arn:aws:s3:::${FrontS3Bucket}/*'
    Type: 'AWS::S3::BucketPolicy'
  CfApiCachePolicy:
    Properties:
      CachePolicyConfig:
        Name: 'ApiCachePolicy'
        DefaultTTL: 1
        MaxTTL: 1
        MinTTL: 0
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: 'all'
          HeadersConfig:
            HeaderBehavior: 'whitelist'
            Headers:
              - 'Authorization'
          QueryStringsConfig:
            QueryStringBehavior: 'all'
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
    Type: 'AWS::CloudFront::CachePolicy'
  CfFrontCachePolicy:
    Properties:
      CachePolicyConfig:
        Name: 'FrontCachePolicy'
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 0
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: 'all'
          HeadersConfig:
            HeaderBehavior: 'none'
          QueryStringsConfig:
            QueryStringBehavior: 'all'
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
    Type: 'AWS::CloudFront::CachePolicy'
  CfDistribution:
    Properties:
      DistributionConfig:
        Comment: 'A simple distribution with an S3 origin'
        DefaultCacheBehavior:
          AllowedMethods:
            - 'HEAD'
            - 'GET'
          CachedMethods:
            - 'HEAD'
            - 'GET'
          CachePolicyId: !Ref CfFrontCachePolicy
          TargetOriginId: !Sub 's3-origin-${FrontS3Bucket}'
          ViewerProtocolPolicy: 'redirect-to-https'
        CacheBehaviors:
          - AllowedMethods:
              - 'HEAD'
              - 'DELETE'
              - 'POST'
              - 'GET'
              - 'OPTIONS'
              - 'PUT'
              - 'PATCH'
            CachedMethods:
              - 'HEAD'
              - 'GET'
            CachePolicyId: !Ref CfApiCachePolicy
            PathPattern: 'api/*'
            TargetOriginId: !Sub 'api-origin-${ServerlessRestApi}'
            ViewerProtocolPolicy: 'redirect-to-https'
        DefaultRootObject: 'index.html'
        Enabled: true
        HttpVersion: 'http1.1'
        IPV6Enabled: false
        Origins:
          - DomainName: !Sub '${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com'
            Id: !Sub 'api-origin-${ServerlessRestApi}'
            OriginPath: '/Prod'
            CustomOriginConfig:
              OriginProtocolPolicy: 'https-only'
          - DomainName: !Sub '${FrontS3Bucket}.s3-website.${AWS::Region}.amazonaws.com'
            Id: !Sub 's3-origin-${FrontS3Bucket}'
            OriginPath: ''
            CustomOriginConfig:
              OriginProtocolPolicy: 'http-only'
        PriceClass: 'PriceClass_All'
    Type: 'AWS::CloudFront::Distribution'

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  SsuLockerApi:
    Description: "API Gateway endpoint URL for Prod stage for SSU Locker function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  FrontS3BucketName:
    Description: 'Bucket name'
    Value: !Ref FrontS3Bucket
  FrontS3BucketWebsiteURL:
    Description: 'Bucket website url'
    Value: !GetAtt FrontS3Bucket.WebsiteURL
  CfDistributionId:
    Description: 'Id for our cloudfront distribution'
    Value: !Ref CfDistribution
  CfDistributionDomainName:
    Description: 'Domain name for our cloudfront distribution'
    Value: !GetAtt CfDistribution.DomainName
